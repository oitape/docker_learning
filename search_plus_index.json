{"./":{"url":"./","title":"Introduction","keywords":"","body":"从Docker实战 这本书中的学习总结，记录历程。如果你也想学习Docker，希望这本书能帮助到你，节省你的时间！祝好！ Welcome to Docker! Happy Everyone! By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:16 "},"chapter1.html":{"url":"chapter1.html","title":"Docker的世界","keywords":"","body":"什么是docker？ docker是一个命令行程序、一个后台守护进程，以及一组远程服务。它能够简化安装、运行、发布和删除软件。通过使用一项UNIX技术——即容器技术。 容器不是虚拟化的 传统的的程序通常采用硬件虚拟化，以提供隔离。虚拟机提供虚拟的硬件，安装操作系统和其他程序，需要花费很长的时间来创建，且非常消耗资源，不仅要运行我们需要执行的软件，还需要运行整个操作系统的副本。 而docker容器不适用硬件虚拟化。运行在Docker中的程序接口和主机的Linux直接打交道，因为容器中运行的程序和计算机的操作系统之间没有额外的中间层，没有资源冗余软件的运行 docker构建容器隔离包括8个方面 PID命名空间——进程标识符和能力 UTS命名空间——主机名和域名 MNT命名空间——文件系统访问和机构 IPC命名空间——通过共享内存的进程间通信 NET命名空间——网络访问和结构 USR命名空间——用户名和标识 chroot（）——控制文件系统根目录的位置 cgroups——资源保护 简单示例 docker run dockerinaction/hello_world. By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:16 "},"rong-qi-zhong-yun-xing-ruan-jian.html":{"url":"rong-qi-zhong-yun-xing-ruan-jian.html","title":"容器中运行软件","keywords":"","body":"在docker容器中拉去并运行程序 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"rong-qi-zhong-yun-xing-ruan-jian/213001-ru-hexue-xi-docker-ming-ling.html":{"url":"rong-qi-zhong-yun-xing-ruan-jian/213001-ru-hexue-xi-docker-ming-ling.html","title":"如何学习docker命令","keywords":"","body":"如何学习docker命令 通过 docker help 将显示Docker命令行工具的基本语法，以及所有命令的完整列表。 查看某一个具体命令的功能可通过该如下来显示该命令的作用。 docker help example： docker help version By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"rong-qi-zhong-yun-xing-ruan-jian/jian-li-yi-ge-wang-zhan-jian-kong-qi.html":{"url":"rong-qi-zhong-yun-xing-ruan-jian/jian-li-yi-ge-wang-zhan-jian-kong-qi.html","title":"建立一个网站监控器","keywords":"","body":" 运行NGINXdocker run --detach --name web nginx:latest 运行此命令，Docker将从Docker Hub上的NGINX仓库下载、安装、运行该镜像软件，运行结束还有一串类似这样的数字 785e0931595766c33ee34e393fdb15955371c60072c218b5b131232487bc1282 这是运行NGINX容器的唯一标识符，标识符显示出来后，并不会发生什么，因为使用了--detach选项，并在后台启动该程序 静默运行在在后台的程序被称作守护程序，当你要在后台运行容器的守护程序，记得使用--detach标志或者它的缩写形式-d 运行邮件程序 docker run -d --name mailer dockerinaction/ch2_mailer 运行交互式容器 docker run --interactive --tty \\ --link web:web \\ --name web_test \\ busybox:latest /bin/sh --interactive：告诉Docker保持标准输入流对容器开放，即使容器没有终端连接。 --tty：告诉Docker为容器分配一个虚拟终端，这将允许你发送信号给容器。 用交互式容器的命令创建一个容器，启动一个UNIX shell，命令被链接到运行NGINX的容器上。 启动监控器docker run -it \\ --name agent \\ --link web:insideweb \\ --link mailer:insidemailer \\ dockerinaction/ch2_agent 会看到终端一直在打印 System up 如果需要后台运行 添加-d选项即可，（注意：暂停agent时【command + c】时，要先执行docker rm agent，再次尝试后台运行agent，你会看到终端不会再有相关log信息） 可通过 docker logs -f agent来实时输出信息。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"rong-qi-zhong-yun-xing-ruan-jian/233001-lie-ju-3001-ting-zhi-3001-zhong-qi-3001-cha-kan-rong-qi-shu-chu.html":{"url":"rong-qi-zhong-yun-xing-ruan-jian/233001-lie-ju-3001-ting-zhi-3001-zhong-qi-3001-cha-kan-rong-qi-shu-chu.html","title":"列举、停止、重启、查看容器输出","keywords":"","body":" 正在运行容器查看 docker ps 类似下面的信息 CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES 6328d9ca7c6b dockerinaction/ch2_agent \"/watcher/watcher.sh\" 6 minutes ago Up 5 minutes agent 容器ID 使用的镜像 容器中执行的命令 容器运行时长 容器暴露的网络端口 容器名称 重启容器 docker restart 查看日志 docker logs docker logs 命令有一个选项，--follow 或者 -f ,用来显示整个日志,容器中日志的变化将实时在终端当中呈现。 测试当web服务器停止时会不会发出通知。 docker stop web 等待几秒钟，执行 docker logs mailer 如果看到终端输出 Sending email: To: admin@work Message: The service is down! 说明监控成功检测到Web同期中NGINX服务器已经停止。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"33001-yi-jie-jue-de-wen-ti-he-pid-ming-ming-kong-jian.html":{"url":"33001-yi-jie-jue-de-wen-ti-he-pid-ming-ming-kong-jian.html","title":"PID命名空间","keywords":"","body":"什么是PID 每一个运行的程序或进程，在Linux中都有唯一一个编号，叫做进程标识符即PID。 一个PID命名空间是一组识别进程的数字。Linux提供了工具可以创建多个PID命名空间，每个命名空间拥有一套完整的PID，每个PID命名空间将包含自己的PID1、2、3，以此类推。 运行如下命令可以看到: docker run -d --name namespaceA busybox:latest /bin/sh -c 'sleep 30000' docker run -d --name namespaceB busybox:latest /bin/sh -c 'sleep 30000' 运行 docker exec namespaceA ps PID USER TIME COMMAND 1 root 0:00 sleep 30000 13 root 0:00 ps 运行 docker exec namespaceB ps PID USER TIME COMMAND 1 root 0:00 sleep 30000 6 root 0:00 ps 使用docker exec命令可以在运行的容器中运行额外的进程。ps 命令显示所有正在运行的进程和它们的PID。 如果没有PID命令空间，在一个容器内运行的进程将和其他容器或主机共享相同的ID空间，这样，容器无法确定其他主机有哪些进程在运行。 你可以有选择的创建没有PID命名空间的容器。可以通过 docker create 或 dcoker run中设置 --pid 标志以及将该值设置为 host来进行尝试. 注：常见的冲突问题 两个程序都想要绑定到同一个端口 两个程序都使用相同的临时文件名和文件锁 两个程序想要使用不同版本且全局已经安装的库 同一个程序的两个副本要使用相同的PID文件 第二个安装的程序修改了另一个程序正在使用的环境变量，导致程序的中断 Docker通过Linux的命名空间、根文件系统和虚拟网络组件等工具解决了这些软件冲突。所有这些工具都用来为每个容器提供隔离。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:16 "},"xiao-chu-yuan-shu-ju-chong-tu.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu.html","title":"消除元数据冲突","keywords":"","body":"构建多个容器运行Web服务器以及针对每个服务器的监视器。 示例：一个客户要求奖励一个系统，为客户承载可变数量的网站，利用前面张杰构建的监控技术。此示例中，将构建多个容器运行web服务器以及针对每个服务器的监视器。 架构图如下所示： By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"xiao-chu-yuan-shu-ju-chong-tu/ling-huo-de-rong-qi-biao-shi.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu/ling-huo-de-rong-qi-biao-shi.html","title":"灵活的容器标识","keywords":"","body":" 创建多个NGINX容器副本docker run -d --name webid nginx 如果你复制上面命令进行第二次创建，将会失败，并出现冲突错误如下： docker: Error response from daemon: Conflict. The container name \"/webid\" is already in use by container \"1f405a5b8b496ccaca2425924585d2c41fb9646ac886e490a96cf885dbcf83c0\". You have to remove (or rename) that container to be able to reuse that name. See 'docker run --help'. 默认情况下，Docker给配一个为一的名字给他创建的每个容器。--name只是重写了该已知值的进程。如果出现以上冲突可以通过修改名字进行 docker rename webid webid-old 通过docker ps查看第一个运行的名字是否改成功 重命名可以减轻一次命名冲突，但无法避免首要问题。除了名字，Docker分配一个唯一的标识符，是一个十六进制编码的1024位数字，如1f405a5b8b496ccaca2425924585d2c41fb9646ac886e490a96cf885dbcf83c0 ，我们也可以通过该ID执行 stop | exec 命令，即完整的CONTAINER ID。 一般docker生成的ID基本是唯一的，产生冲突几乎不可能，所以大多数Docker界面上你可以看到被截断成12个字符，在获取容器，可以使用他们 docker exec ps docker stop 获取容器ID的方式 - 第一种：简单的启动或创建一个新容器，将命令的结果赋值给一个Shell变量。 - 第二种：如果只想在创建容器使得到容器ID，交互式容器是无法做到的。可以用`docker create`命令。它和`docker run`命令类似，主要区别在于该容器是被停止状态创建的。 如果您是使用shell命令，你可以很方便的将结果分配给一个shell变量，以后可再次使用 CID=$(docker create nignx) echo $CID 将容器ID写入到文件中 docker create --cidfile /tmp/web.cid nginx #执行cat 命令查看 cat /tmp/web.cid 获取最后创建的那个容器的截断ID，可以这么做 docker ps --latest --quiet 缩写形式如下 docker ps -l -q 如果你想获取完整的容器ID，可以带上如下选项 docker ps --no-trunc By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"xiao-chu-yuan-shu-ju-chong-tu/rong-qi-de-zhuang-tai-he-yi-lai.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu/rong-qi-de-zhuang-tai-he-yi-lai.html","title":"容器的状态和依赖","keywords":"","body":" docker总共有四种状态 运行中 暂停中 重新启动总 已退出 那些被docker create创建的容器从未启动(已退出状态)，想看到所有运行ing 或者 退出的容器，使用该命令查看 docker ps -a 如果你要启动已经停掉的容器可以采用如下命令 docker start docker 的链接内在机理 链接的机制将IP地址注入所依赖的容器，在运行的容器中得到该IP地址。如果你尝试启动一个容器，其依赖于另一个并未运行的容器，docker将不会把该容器的IP地址注入到未运行的容器中。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong.html","title":"构建与环境无关的系统","keywords":"","body":" Docker有三个特定的功能，帮助建立与环境无关的系统 只读文件系统 环境变量注入 存储卷 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong/zhi-du-wen-jian-xi-tong.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong/zhi-du-wen-jian-xi-tong.html","title":"只读文件系统","keywords":"","body":"WrdPress使用MySQL的数据库程序来存储大部分程序，先确保运行WordPress的容器使只读文件系统。 只读文件系统的两个效果 你对容器不能更改他所包含的文件 容器中的攻击者无法破坏文件 docker run -d --name wp --read-only wordpress:4 可以通过检查容器元数据查看容器是否在运行,如果在运行输出为真。 docker inspect --format \"{{.State.Running}}\" wp 会报错，WordPress 有一个MySQL的数据库依赖关系 docker run -d --name wpdb -e MYSQL_ROOT_PASSWORD=ch2demo mysql:5 再次执行如下命令(修改原书命令，增加 -v /tmp/，解决依旧报错问题) docker run -d --name wp2 --read-only -v /run/lock/apache2/ -v /run/apache2/ -v /tmp/ --link wpdb:mysql -p 80 wordpress:4 再通过检查容器元数据发现成功运行中了。 通过使用只读文件系统，以及链接WordPress到另一个运行着数据库的容器，可以确保运行WordPress镜像的容器永远不会改变，如果客户的WP机器除了问题，可在其他地方启动该容器的另一个副本。 目前这样做还是有两个问题 MySQL和WP运行在同一台机器上 WP对重要的设置：数据库名称、管理用户、管理密码数据库加盐等使用默认值。解决这个问题可以创建多个版本WP软件，每个客户特殊配置。 通过环境变量来注入配置则是一个更好的方式。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong/huan-jing-bian-liang-de-zhu-ru.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong/huan-jing-bian-liang-de-zhu-ru.html","title":"环境变量的注入","keywords":"","body":"环境变量是通过其执行上下文提供给程序的键值对。它可以让我们在改变一个程序的配置时，无须修改任何文件去启动该程序的命令。 Docker提供这样的机制：将环境变量注入到一个新容器，可在容器创建时就进行配置。 如何查看注入的环境变量，使用下面命令 docker run --env MY_ENVIRONMENT_VAR=\"this is a test\" busybox env --env的缩写形式-e，可用于注入任何环境变量。如果变量已经由镜像或Docker设置，则该值将被覆盖。容器内部运行程序的方式，可依赖这种变量。 最后的env：在同期中执行env命令。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong/jian-li-chi-jiu-hua-de-rong-qi.html":{"url":"xiao-chu-yuan-shu-ju-chong-tu/gou-jian-yu-huan-jing-wu-guan-de-xi-tong/jian-li-chi-jiu-hua-de-rong-qi.html","title":"建立持久化的容器","keywords":"","body":"Docker提供用于监控和重启容器的几个选项： 自动重启容器 使用--restart选项来自动重启容器 docker run -d --name backoff-datector --restart always busybox date Docker并不总是立即重新启动容器，Docker采用了指数回退侧罗定时阐释重新启动，回退策略决定了连续尝试重新启动所需的时间间隔。指数回退策略将会花费在前一次等待连续尝试时间的2倍。 使用init和supervisor进程维持容器的运行状态 init或supervisor进程，用于启动和维护其他程序状态。 容器中的supervisor进程用来保持容器始终运行，即使目标进程出现故障并重启。 下面来创建容器使用supervisord来确保所有相关的进程持续运行 docker run -d -p 80:80 --name lamp-test tutum/lamp 使用docker top命令查看该容器有哪些进程正运行着 docker top lamp-test 你会看到supervisord运行在程序清单中。现在可以通过手动停止容器内的某一进程，来测试supervisord的重启功能。 在容器内杀死进程，需要知道它在容器中的PID值。运行exec自命令来获取 docker exec lamp-test ps 通过指定PID通过kill命令杀死进程 exec lamp-test kill 选择apache2的PID进行替换杀死 当apache2停止时，supervisord进程会记录该事件，并重启该进程。 通过docker logs lamp-test来查看日志 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 12:03:18 "},"qing-li.html":{"url":"qing-li.html","title":"清理","keywords":"","body":"Docker中的清理只需要掌握几个简单的命令 使用docker ps命令查看当前正在运行中的程序。 使用docker ps -a查看所有正在运行和停止运行的程序。 使用docker rm 来移除容器。（移除正在运行的容器之前需要先停止） 使用docker stop 来停止正在运行的容器，或者使用docker 人 -f 标志停止一个进程。区别： - 使用-f标志，Docker发送SIG_KILL信号，立即终止接收过程。 - 视同docker stop，将发送SIG_HUG信号。 SIG_HUG的收件人有时间进行最后的退出和清理任务。 SIG_KILL没有这样的允许时间，并可能导致文件损坏。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 14:24:50 "},"ruan-jian-an-zhuang-de-jian-hua.html":{"url":"ruan-jian-an-zhuang-de-jian-hua.html","title":"软件安装的简化","keywords":"","body":"镜像安装细节 Docker Hub和其他注册服务器 使用docker save 和docker load命令加载、导出镜像文件 使用Dockerfiles构建镜像 仓库可容纳多个镜像，每个库中的镜像可由标签来唯一标识。 当使用docker pull 或 docker run命令，如果没有指定一个替代的注册服务器，Docker默认将在Docker Hub里面找。 镜像发布的两种方式 使用命令行来发布独立系统构建镜像，这种方式被认为是不能信任的。 公开Dockerfile，并使用Docker Hub的持续构建系统。可信赖的方式。 使用私有的Docker Hub注册服务器，或将镜像推送到Docker Hub上你的账号中。需要你的认证授权。使用docker login命令登录到Docker'Hub，这样就可以从私有库下载、推送到你控制的任何镜像库。 运行docker login提醒你输入账号密码。完成后使用docker logout命令退出。 查询想要安装的软件 docker search 因为Docker Hub是免费的公共服务，用户会建立大量的个人副本。选择时我们要注意代码是否值得信赖。运行docker search可以看到镜像是从公开的脚本构建的，在AUTOMATED列寻找一个[OK]的标记。 Docker Hub不是软件的唯一来源 其他安装软件的三种方式： 使用替代仓库的注册服务器或运行自己的注册服务器 这种方式需要的视注册服务器的地址，注册服务器后面章节讲解。命令如下 docker pull quay.io/dockerinaction/ch3_hello_registry:latest 格式如下 [REGISTRYHOST/][USERNAME/]NAME[:TAG] 可以手动从文件加载镜像 Docker 提供一个命令将镜像由文件加载到Docker。 首先讲下如何保存一个DockerHub中的镜像到本地文件。 docker pull busybox docker pull 然后执行如下保存命令 docker save -o ~/Desktop/myfile.tar busybox docker save -o myfile.tar 你会看到桌面上存在一个myfile.tar的文件。接着运行移除镜像的命令 docker image rm busybox 或者 docker rmi busybox 移除镜像后，使用docker load将创建的文件再次加载。如果运行docker load命令而不使用 -i 参数，Docker会使用标准输入流，而不是从文件读取归档。 docker load -i ~/Desktop/myfile.tar 然后使用docker images命令你会看到busybox镜像在列表当中。 从其他来源下载项目，并利用提供的Dockerfile自检镜像。 分发Dockerfile类似于分发镜像文件。一般常用Git。git clone https://github.com/dockerinaction/ch3_dockerfile.git 下载完成会看到一个ch3_dockerfile，然后运行如下命令指定ch3_dockerfile路径 `sh docker build -t dia_ch3/dockerfile ch3_dockerfile ``` 然后使用docker images`命令你会看到dia_ch3/dockerfile镜像在列表当中。 By oitm，使用知识共享 署名-相同方式共享 4.0协议发布            此页面修订于： 2019-03-05 15:59:35 "}}